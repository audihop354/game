from turtle import width
import pygame
# from pygame.locals import *
import random
import time
import math

pygame.init()
pygame.mixer.music.load('sound/backgroundmusic.wav')
pygame.mixer.music.play(-1)
pygame.mixer.music.set_volume(0.2)
#set color
# green = (76,208,56)
# gray = (100,100,100)
# red = (200,0,0)
# yellow = (255,232,0)
# white = (255,255,255)
color={0:"red", 1:"yellow", 2:"blue", 3:"pink", 4:"green"}

#set screen
WIDTH=1000
HEIGHT=600
screen = pygame.display.set_mode((WIDTH,HEIGHT), pygame.RESIZABLE)

#set caption and icon and image and font
pygame.display.set_caption("Game cua nha cai den tu Chau Au")
icon = pygame.image.load('img/car.png')
pygame.display.set_icon(icon)
arrow = pygame.image.load('arrow.png')
font = pygame.font.Font('./font/Audiowide-Regular.ttf',150)
#Mystery Box
mysbox= pygame.image.load('mics/mystery box.png')
mysbox = pygame.transform.scale(mysbox,(WIDTH/25,HEIGHT/20))
cheetahIcon= pygame.image.load('mics/cheetah.png')
turtleIcon = pygame.image.load('mics/turtle.png')
flipIcon = pygame.image.load('mics/flip.png')
flipIcon = pygame.transform.scale(flipIcon,(screen.get_width()/25,screen.get_height()/20))
first_velocity = 3
second_velocity = 3.5
oldWidth = screen.get_width();
dizzy_star = []
#Countdown
countdownbg=pygame.transform.scale(pygame.image.load("./mics/testbg.png"),(screen.get_width(),300)).convert()
countdownbg.set_alpha(100)
countdown=[]
countdown.append(-1)
for i in range(3,0,-1):
    countdown.append(pygame.image.load(f"./mics/{i}.png"))
countdown.append(font.render(("Goooo!"),True,(51, 204, 204)))

def resizemysbox(mysbox):
        return pygame.transform.scale(mysbox,(screen.get_width()/25,screen.get_height()/20))
#Background

def rand():
    a=random.randint(0,3)
    b=random.randint(0,3)
    while a==b:
        b=random.randint(0,3)
    return [a,b]

class ITEM :
    def __init__(self,y,velocity):
        self.img = mysbox
        self.y=y #fixed
        self.appRound=rand()
        self.x= [random.randint(400,700),random.randint(400,700)]
        self.visible=[1,1]
        self.velocity=velocity
        self.duration=0
        self.pivotTime=0 #Set when you pick an item
        self.spriteWin=[]
        self.spriteLose=[]
        self.spriteFlash=[]
        self.spriteFlip=[]
        self.spriteLaser=[]
        self.spriteBoost=[]
        self.spriteSlow=[]
        self.spriteStun=[]
        self.curSprite=0
        self.portalX=0
        self.openPortal=0
        self.checkFlip = 0
        self.flipX=0
        self.flipVelocity=0
        self.name=10
        self.laser=0
        self.boost=0
        self.slow=0
    def slower(self,i):
        self.name = 1
        self.duration=1500
        car[i].velocity=car[i].velocity/2
        self.pivotTime=pygame.time.get_ticks()
        self.slow=1
        self.curSprite=0
    def runSlow(self, i): 
        if curTime-self.pivotTime > self.duration:
            car[i].velocity = car[i].velocity
            print (i)
            self.slow=0
        self.curSprite+=0.3
        if car[i].curRound== car[carSelected].curRound:
            draw(self.spriteSlow[int(self.curSprite)%1],car[i].x,self.y-50)
    def faster(self,i):
        self.name = 0
        self.duration=1000 #Duration of an item
        car[i].velocity=car[i].velocity*2
        self.pivotTime= pygame.time.get_ticks()
        self.boost=1
        self.curSprite=0
    def runFaster(self,idx):
        self.curSprite+=0.3
        if car[idx].curRound==car[carSelected].curRound:
            draw(self.spriteBoost[int(self.curSprite)%7],car[idx].x-55,self.y)
        if curTime- self.pivotTime> self.duration:
            self.boost=0
            car[idx].velocity/=2
    def setLaser(self):
        self.curSprite=0    
        self.laser=1

    def runLaser(self,idx):
        self.curSprite+=0.08
        if self.curSprite<5:
            if car[idx].curRound==car[carSelected].curRound:
                draw(self.spriteLaser[int(self.curSprite)],car[idx].x,self.y-self.spriteLaser[int(self.curSprite)].get_height()+130)
        else:
            self.laser=2
            self.curSprite=0
            self.stun(idx)
    def stun(self,i):
        self.duration=1000 #Duration of an item
        self.velocity=car[i].velocity
        car[i].velocity = 0
        self.pivotTime = pygame.time.get_ticks()
        self.curSprite = 0
        
    def runStun(self,i):
        if curTime-self.pivotTime>self.duration:
            car[i].velocity=self.velocity
        self.curSprite += 0.1
        if car[i].curRound== car[carSelected].curRound:
                draw(self.spriteStun[int(self.curSprite)%3],car[i].x+screen.get_width()/100,car[i].y-screen.get_width()/35)
       
    
    def flip(self):
        # self.name = 2
        self.curSprite=0
        self.flipX=screen.get_width()+150
        self.checkFlip = 1
        self.flipVelocity=7
        # car[i].velocity = -1 * car[i].velocity
        # for j in range(4):
        #     car[i].img[j] = pygame.transform.flip(car[i].img[j],True,False)

    def runFlip(self,idx):
        if isCollide(car[idx].x,car[idx].y,self.flipX,self.y):
            if car[idx].x<self.flipX:
                car[idx].y-=0.8
            # if car[idx].x-distance(car[idx].x,car[idx].y,self.flipX,self.y)<=self.flipX:
            elif car[idx].x>self.flipX :
                car[idx].y+=0.8
            car[i].x-=2.5*car[i].velocity
        self.flipX -= self.flipVelocity
        if self.curSprite>5:
            self.curSprite=0
        self.curSprite+=0.4 
        if car[carSelected].curRound==car[idx].curRound:
            draw(self.spriteFlip[int(self.curSprite)],self.flipX,self.y-55)
        if self.flipX<-100 :
            self.checkFlip=0
        for j in range (4):
            car[i].img[j] = pygame.transform.flip(car[i].img[j],True,False)
            


    def win(self,idx):
        self.openPortal=1
        self.portalX=0
        self.out=0
        self.curSprite=0
           
    def runWin(self,idx):
        if isCollide(car[idx].x,car[idx].y,self.portalX,self.y):
            bg[mapSelected][car[idx].curRound].car.remove(idx)
            car[idx].curRound=3
            bg[mapSelected][car[idx].curRound].car.append(idx)
            if self.out==0:
                car[idx].x=screen.get_width()/1.3
                self.curSprite=4
            self.out=1
            self.portalX=screen.get_width()/1.3
        if self.out==0:    
            if self.curSprite>3:
                self.curSprite=0
        else:
            if self.curSprite>7:
                self.curSprite=4
        self.curSprite+=0.4
        if car[idx].curRound==car[carSelected].curRound:
            draw(self.spriteWin[int(self.curSprite)],self.portalX,self.y-30)
        if distance(car[idx].x,car[idx].y,self.portalX,self.y)>140 and self.out :
            self.openPortal=0

    def lose(self,idx):
        self.openPortal=2
        self.portalX=0
        self.out=0
        self.curSprite=0

    def runLose(self,idx):
        if isCollide(car[idx].x,car[idx].y,self.portalX,self.y):
            if self.out==0:
                car[idx].x=10
                self.curSprite=4
            self.out=1
            self.portalX=10
        if self.out==0:    
            if self.curSprite>3:
                self.curSprite=0
        else:
            if self.curSprite>7:
                self.curSprite=4
        self.curSprite+=0.4
        if car[idx].curRound==car[carSelected].curRound:
            draw(self.spriteLose[int(self.curSprite)],self.portalX,self.y-30)
        if distance(car[idx].x,car[idx].y,self.portalX,self.y)>250:
            self.openPortal=0

    def flash(self,idx):
        car[idx].x+=170
        car[idx].y=-100
        self.curSprite=0
        self.flashX= car[idx].x+10
    def runFlash(self,idx):
        if self.curSprite+0.20<5:
            self.curSprite+=0.20
        else:
            car[idx].y=self.y-20
        if car[idx].curRound == car[carSelected].curRound:
            draw(self.spriteFlash[int(self.curSprite)],self.flashX,self.y-screen.get_height()/20)
            

class BACKGROUND:
    def __init__(self,img, start,end) :
        self.img=pygame.transform.scale(img,(screen.get_width(),screen.get_height()))
        self.start=start
        self.end=end
        self.car=[]
#Background Initialization
bg=[]
for i in range (1):
    bg.append([])
    for j in range(4):
        start,end=0,screen.get_width()  
        # if j==3:
        #     end =screen.get_width()/1.1
        img=(f"./background levels/background-{i}-{j}.png")
        bg[i].append(BACKGROUND(pygame.image.load(img),start,end))

#Car
class CAR:
    def __init__(self, car_y,ratio ,velocity,curRound):
        self.img = []
        self.x = 0
        self.y = car_y/ratio
        self.velocity = velocity
        self.destination = 0
        self.curRound=curRound
        self.ratio=ratio
        self.duration=random.uniform(2000,3000)
        self.curSpriteWheel=0
        self.curSpriteSmoke=0
        self.spriteSmoke=[]
        self.pivotTime=0
    def addImg(self,img):
        self.img.append(pygame.transform.scale(img,(WIDTH/12.5,HEIGHT/12)))
    def run(self):
        if curTime-self.pivotTime>= self.duration and self.velocity!=0:
            self.velocity=random.uniform(first_velocity,second_velocity)
            self.pivotTime=curTime
            self.curSpriteSmoke=0
        self.x += self.velocity 
    def runAnimation(self,ok):
        if self.curSpriteWheel>3:
            self.curSpriteWheel=0
        if ok:
            self.curSpriteWheel+=0.4
        
        self.curSpriteSmoke+=0.1
        if self.curSpriteSmoke<4 :
                draw(self.spriteSmoke[int(self.curSpriteSmoke)],self.x-screen.get_width()/30,self.y+screen.get_height()/120)
        draw(self.img[int(self.curSpriteWheel)],self.x,self.y)
    def resize(self):
        w = screen.get_width()
        h = screen.get_height()
        for i in range(4):
            self.img[i] = pygame.transform.scale(self.img[i],(w/12.5,h/12))
        global oldWidth,first_velocity,second_velocity
        self.velocity = w * self.velocity / oldWidth
        first_velocity = first_velocity * screen.get_width() / oldWidth
        second_velocity = second_velocity * screen.get_width() / oldWidth
        self.x = self.x * screen.get_width() / oldWidth
        oldWidth = screen.get_width()
        self.y=h/self.ratio
# Car initialization
transportation={
    0:"formula ones" # List phuong tien
}
transSelected=0
r=[2.28,1.83,1.5,1.27,1.12] # ratio cho vo 1 mang de initialize
car=[]
for i in range (5):
    trans= transportation[transSelected]
    car.append(CAR(HEIGHT,r[i], random.uniform(first_velocity,second_velocity), 0))
    for j in range(4): # Add animation
        img=f"./{transportation[0]}/{j}_{color[i]}.png"
        car[i].addImg(pygame.image.load(img))
    for j in range(4):
        img=pygame.transform.scale(pygame.image.load(f"./mics/smoke_{j}.png"),(50,50))
        car[i].spriteSmoke.append(img)

# Item initialization
item=[]
for i in range(5):
    item.append(ITEM(car[i].y+int(screen.get_height()/50),car[i].velocity))

for i in range(5):
    for j in range(4):
        img = pygame.image.load(f"./mics/stun_{j}.png")
        img = pygame.transform.scale(img,(screen.get_width()/25,screen.get_height()/20))
        item[i].spriteStun.append(img)
    for j in range(8):
        img=f"./mics/{j}-nitro.png"
        item[i].spriteBoost.append(pygame.image.load(img))
    for j in range (1):
        img=f"./mics/turtle.png"
        item[i].spriteSlow.append(pygame.image.load(img))
    for j in range(8):
        img=f"./mics/portal_{j}.png"
        item[i].spriteWin.append(pygame.image.load(img))
    for j in range(5):
        img=f"./mics/flash_{j}.png"
        item[i].spriteFlash.append(pygame.image.load(img))
    for j in range(8):
        img=f"./mics/portal_lose_{j}.png"
        item[i].spriteLose.append(pygame.image.load(img))
    for j in range(6):
        img=f"./mics/flip_{j}.png"
        item[i].spriteFlip.append(pygame.image.load(img))
    for j in range(5):
        img=f"./mics/lightning_{j}.png"
        item[i].spriteLaser.append(pygame.transform.scale(pygame.image.load(img),(95,900)))
#function for GAME
def draw(player_car,x,y):
    screen.blit(player_car,(x, y))
def isCollide(a,b,x,y):
    return (math.sqrt((a-x)*(a-x)+(b-y)*(b-y))<screen.get_width()/12.5)

def distance(a,b,x,y):
    return math.sqrt((a-x)*(a-x)+(b-y)*(b-y))

frame = 0

#game Loop
clock = pygame.time.Clock()
fps = 120

#Initalize
r=0
carSelected=0
mapSelected=0
pressed=0
winItem=-1

for i in range (5):
    bg[mapSelected][r].car.append(i)
    car[i].x=bg[mapSelected][r].start
    car[i].curRound=r

#System Time
curTime=0
pivotTime=0
checkFlip = False
iCountdown=0
#GAME


running=True
while running:
    print(car[0].velocity)
    curTime=pygame.time.get_ticks()
    clock.tick(fps)     
    #Events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
            exit()
        if event.type == pygame.KEYDOWN and pressed==0:
            pressed=1
            if event.key==pygame.K_F1:
                carSelected=0
            if event.key==pygame.K_F2:
                carSelected=1
            if event.key==pygame.K_F3:
                carSelected=2
            if event.key==pygame.K_F4:
                carSelected=3
            if event.key==pygame.K_F5:
                carSelected=4
        if event.type == pygame.KEYUP and pressed:
            pressed=0
        #resize screen
        if event.type == pygame.VIDEORESIZE:

            screen = pygame.display.set_mode((event.w, event.h), pygame.RESIZABLE)
            for i in range (4):
                img=(f"./background levels/background-{mapSelected}-{i}.png")
                bg[mapSelected][i].img = pygame.transform.scale(pygame.image.load(img),(screen.get_width(),screen.get_height()))
                bg[mapSelected][i].end = screen.get_width()

            bg[mapSelected][3].end = screen.get_width()/1.1

            print(screen.get_width())

            for i in range(5):
                car[i].resize()
                item[i].velocity = car[i].velocity
                item[i].y=car[i].y + int(screen.get_height()/50)
                mysbox = resizemysbox(mysbox)

    screen.blit(bg[mapSelected][car[carSelected].curRound].img,(0,0))

    #draw 5 car
    for i in bg[mapSelected][car[carSelected].curRound].car:
        if car[i].x <= bg[mapSelected][car[carSelected].curRound].end: # check finished 
            car[i].runAnimation(1)
        else:
            car[i].runAnimation(0)
    for i in range(5):
        for j in range (2):
            if item[i].appRound[j] == car[carSelected].curRound and item[i].visible[j]==1:
                draw(mysbox,item[i].x[j],item[i].y)
    if curTime-pivotTime<5000:
        draw(countdownbg,0,(screen.get_height()-300)/2)
        iCountdown=int((curTime-pivotTime)/1000)
        if iCountdown>0:
            draw(countdown[iCountdown],
            (screen.get_width()-countdown[iCountdown].get_width())/2,(screen.get_height()-140)/2)
            
        pygame.display.update()
        continue
     

    #draw items

    for i in range(5):
        #Slower
        if item[i].slow==1:
            item[i].runSlow(i)
        #Faster
        if item[i].boost==1:
            item[i].runFaster(i)
        #Win
        if item[i].openPortal==1:
            # print (i)
            item[i].runWin(i)
        if item[i].openPortal==2:
            item[i].runLose(i)
        #Flash
        if car[i].y<0 :
            item[i].runFlash(i)
        #runStun
        if item[i].laser==1 :
            item[i].runLaser(i)
        if item[i].laser==2:
            if car[i].velocity == 0:
                item[i].runStun(i)
        #Flip
        if item[i].checkFlip==1:
            item[i].runFlip(i)


    #Check collision
    for i in range (5):
        for j in range(2):
            if item[i].appRound[j] == car[i].curRound and isCollide(car[i].x,car[i].y,item[i].x[j],item[i].y) and item[i].visible[j]:
                item[i].visible[j]=0
                picked=random.randint(0,99)
                picked=58
                if picked < 25:
                    item[i].slower(i)
                elif picked < 55:
                    item[i].faster(i)
                elif picked < 70:
                    item[i].flip()
                    for j in range (4):
                        car[i].img[j] = pygame.transform.flip(car[i].img[j],True,False)
                elif picked == 71:
                    item[i].win(i)
                    item[i].portalX=car[i].x+200
                elif picked<=79:
                    item[i].lose(i)
                    item[i].portalX=car[i].x+200
                elif picked<=91 :
                    item[i].flash(i)
                else:
                    item[i].setLaser()
            # Show the item picked
            # if item[i].backToNormal(i) and car[i].curRound==car[carSelected].curRound:
            #     if (pressed==0 or i!=carSelected) and item[i].name<=1:
            #         draw(itemImg[item[i].name],car[i].x+screen.get_width()/100,car[i].y-screen.get_height()/22)
    if pressed ==1:
        for i in bg[mapSelected][car[carSelected].curRound].car:
            if i==carSelected :
                draw(arrow,car[i].x+10,car[i].y-45)
    #check if the car have finish the race
    for i in range (5):
        if car[i].x<=bg[mapSelected][car[i].curRound].end:
            car[i].run()
        elif car[i].curRound<3: 
            bg[mapSelected][car[i].curRound].car.remove(i)
            car[i].curRound+=1
            bg[mapSelected][car[i].curRound].car.append(i)
            car[i].x=bg[mapSelected][car[i].curRound].start-(screen.get_width()/10)
        # else: 
        #     if item[i].openPortalWin:
        #         item[i].openPortalWin=0
                
    pygame.display.update()
pygame.quit()